package com.techelevator.vendomatic800;

import com.techelevator.logs.Logger;
import com.techelevator.salesReport.SalesReport;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.NumberFormat;
import java.util.*;
import java.util.concurrent.TimeUnit;

/**
 * <p>Contributors:</p>
 * <ul>
 *     <li>Yohannes Mata - (contribution)
 *     </li>
 *     <li>Shaun Tanner - ()
 *     </li>
 *     <li>Arthur Dejoie - ()
 *     </li>
 * </ul>
 *
 * @version 1.0
 * @since 06/24/2024*/

public class Vendomatic800 {

    private Map<String, Product> slotIdentifier;
    private List<Product> productList;
    private Transaction transaction;
    private double moneyFedBalance;
    private double change;

    private static NumberFormat USD_FORMATTER = NumberFormat.getCurrencyInstance(Locale.US);
    private static Scanner INPUT = new Scanner(System.in);
    private static String INVENTORY_TXT_PATH =
            "/Users/yohannesmata/module-1-capstone/vendingmachine.csv";
    // Yohannes' path :/Users/yohannesmata/module-1-capstone/vendingmachine.csv
    // Shaun:/Users/dashe/OneDrive/Desktop/MeritAmerica/module-1-capstone/vendingmachine.csv

    public Vendomatic800(){
        this.slotIdentifier = new HashMap<>();
        this.productList = new ArrayList<>();
        this.transaction = new Transaction();
        this.moneyFedBalance = 0;
    }


//    public void run(){
//
//        try {
//            initialUserPrompt();
//            int userChoice = INPUT.nextInt();
//            if((userChoice>4 || userChoice<1) && userChoice != 12321)
//                userChoice = 3;
//            initialUserResponse(userChoice);
//
//        } catch (InputMismatchException inputMismatchException) {
//            System.err.println("Enter a valid input");
//            INPUT.next(); // clears scanner token. Otherwise, if exception occurs the program crashes.
//            run();
//        }
//    }


    public void initPrompt(){
        String[] prompts = {"(1) Display Vending Machine Items", "(2) Purchase", "(3) Exit"};
        for(String prompt: prompts){
            System.out.println(prompt);
        }
    }


    /*
     * Exception goes inside the loop to continuously ask the user to enter input,
     * until the input is valid.
     *
     * If the try-catch was outside the while loop, the exeption occurs and the program terminates
     * */
    public void ru() {
        initPrompt();

        while (true) {
            System.out.print("Enter choice here >>> ");
            try {
                int userChoice = INPUT.nextInt();
                if ((userChoice > 4 || userChoice < 1) && userChoice != 12321) {
                    userChoice = 3;
                }
                initialUserResponse(userChoice);
                break;
            } catch (InputMismatchException inputMismatchException) {
                System.out.println("Invalid input\n");
                INPUT.next();   // clear token to prevent crashing when exception occurs.
            }
        }

    }

    /*
    *   Inventory is generated by reading from vendingmachine.csv. Each item read from the .csv file
    *   will be converted into a new Product instance.
    *
    *   The product is added to vendomatic's map and list. The list gurantees order when
    *   displaying items, the map is used to easily retrieve a product instance.
    *   The map's key is the slot identifier*/

    public void readInventory(){

        try(Scanner inventoryReader = new Scanner(new File(INVENTORY_TXT_PATH))){

            while(inventoryReader.hasNextLine()){

                String currentLine = inventoryReader.nextLine();
                String[] prod = currentLine.split("\\|");

                Product newProduct = createProduct(prod);
                productList.add(newProduct);
                slotIdentifier.put(prod[0], newProduct);
            }
        }catch (FileNotFoundException fileNotFoundException){
            System.err.println(fileNotFoundException.getMessage());
        }
    }


    /*
    *   creates a new instance of a Product given a string array.
    *   Element @:
    *   @ i = 0 identifier A1 , ... , A4, B1, ... , B4, ... , D1, ...
    *   @ i = 1 name of the product.
    *   @ i = 2 price. Parsed to a double.
    *   @ i = 3 type. For instance, chips, drinks, candy.*/

    // What if file has a string @ i = 2?? there needs to be an exception.
    public Product createProduct(String[] newProduct){
        if(newProduct.length == 4)
            return new Product(newProduct[0], newProduct[1], Double.parseDouble(newProduct[2]), newProduct[3]);
        return new Product("", "", 0.0, "");
    }



    /*
    * MENU 1:
    * Stores prompts seen by the user. The final element of the array shows the user what line to enter their
    * Input.   */
    public void initialUserPrompt(){
        String[] prompts = {"(1) Display Vending Machine Items\n", "(2) Purchase\n", "(3) Exit\n", "Enter choice here >>> "};
        for(String prompt:prompts)
            System.out.print(prompt);
    }

    public void initialUserResponse(int userInput){
        if(userInput == 1) {
            displayVMItems();
            //run();
            ru();
        }
        if(userInput == 2) {
            purchase();
        }
        if(userInput == 3) {
            shutDown();
        }
        if(userInput == 4){
            viewTotalTransactions();
            //run();
            ru();
        }
        if(userInput == 12321){
            promptRestock();// pass: vm800
            //run();
            ru();
        }
    }



    // menu 2
    public void purchase(){

        printLine(34);

        System.out.println(String.format("current money provided: %s\n" ,
                USD_FORMATTER.format(moneyFedBalance - transaction.getTransactionAmount())) );

        userPurchasePrompt();

            try {
                int userChoice = INPUT.nextInt();

                if(userChoice>3 || userChoice <1)
                    throw new InvalidChoiceException("Invalid option selected. ");

                if (userChoice == 1) {
                    feedMoney();
                    purchase();
                }

                if (userChoice == 2) {
                    displayVMItems();
                    selectProduct();
                    purchase();
                }
                if (userChoice == 3)
                    finishTransaction();

            } catch (InputMismatchException e) {
                System.err.println( "Invalid input" );
                INPUT.next();
                purchase();
            }catch (InvalidChoiceException invalidChoiceException){
                String redAnsi = "\033[0;31m";
                String clearAnsi = "\033[0;0m";
                System.out.println("\n" + redAnsi + invalidChoiceException.getMessage() + clearAnsi + "\n");

                purchase();
            }

    }

    public void userPurchasePrompt(){
        String[] prompts = {"(1) Feed Money\n", "(2) Select Product\n", "(3) Finish Transaction\n", "Enter choice here >>> "};
        for(String prompt: prompts)
            System.out.print(prompt);

    }

    public void feedMoney(){
        try {
            System.out.print("Enter a US denomination value >>> ");
            double moneyFed = INPUT.nextDouble();

            if(!validCurrency(moneyFed)){
                throw new InvalidChoiceException("Invalid US denomination");
            }

            moneyFedBalance += moneyFed;
            Logger.logMoneyFed(moneyFed);
        } catch (InvalidChoiceException e) {
            System.err.println(e.getMessage());
        }

    }

    public void selectProduct() {

        System.out.print("Enter choice here >>> ");
        String selection = INPUT.next();

        try {

            Product product = getProduct(selection);

            if(moneyFedBalance < product.getPrice() + transaction.getTransactionAmount()) {
                throw new InvalidChoiceException("Insufficient funds");
            }

            if(product.getQuantity()<= 0) {
                throw new InvalidChoiceException("SOLD OUT");
            }

            // Requirement for selecting a product.
            if((product.getQuantity() > 0) && (moneyFedBalance >= product.getPrice() + transaction.getTransactionAmount())) {

                printDispenseMessage(product);
                transaction.addToCart(product);

                Logger.logProductPurchase(product);

                change = moneyFedBalance - transaction.getTransactionAmount();
                product.purchase();
            }

        } catch (NullPointerException nullPointerException) {
            System.err.println("Invalid selection");
        }catch (InvalidChoiceException invalidChoiceException){
            System.err.println(invalidChoiceException.getMessage());
        }

    }

    public void printDispenseMessage(Product product) {

        System.out.println();
        switch (product.getType()) {
            case "Chip":
                System.out.println("Crunch Crunch, Yum!");
                break;
            case "Candy":
                System.out.println("Munch Munch, Yum!");
                break;
            case "Drink":
                System.out.println("Glug Glug, Yum!");
                break;
            case "Gum":
                System.out.println("Chew Chew, Yum!");
                break;
        }
        System.out.println();
    }

    public Product getProduct(String slotSelection){

        return slotIdentifier.containsKey(slotSelection.toUpperCase()) ?
                slotIdentifier.get(slotSelection.toUpperCase()) :
                null;

    }

    public void finishTransaction(){

        try {
            if(transaction.getCart().size() < 1) {
                throw new InvalidChoiceException("Cart is empty");
            }

            dispenseChange((float) this.change);

            Logger.logFinalizedTransactions();

            moneyFedBalance = 0;
            transaction.clear();

            printLine(34);
            //run();
            ru();


        } catch (InvalidChoiceException invalidTransactionException) {
            System.out.print(invalidTransactionException.getMessage() + ". Do you wish to quit? [Y/N] >>> ");
            String choice = INPUT.next();

            if(choice.equals("Y") || choice.equals("y")) {

                dispenseChange((float) moneyFedBalance);
                moneyFedBalance = 0;
                Logger.logFinalizedTransactions();

                printLine(47);
                //run();
                ru();
            }
            if(choice.equals("N") || choice.equals("n"))
                purchase();

        }
    }

    public void dispenseChange(float tenure){

        int remainingAmount =  (int)(tenure * 100);
        int quarters = remainingAmount / 25;

        remainingAmount %= 25;
        int dimes = remainingAmount / 10;

        remainingAmount %= 10;
        int nickles = remainingAmount / 5;

        remainingAmount %= 5;
        int pennies = remainingAmount;
        System.out.println();
        System.out.println("Dispensing change...");
        System.out.println("-Quarters: " + quarters);
        System.out.println("-Dimes: " + dimes);
        System.out.println("-Nickles: " + nickles);
        System.out.println("-Pennies: " + pennies +"\n");
    }


    //https://www.javatpoint.com/java-string-format
    public void displayVMItems(){

        System.out.println(String.format("\nProducts%35s", "remaining"));
        printLine(43);

        //choice d2 is 18 characters long, hence -18. This ensures a clean fomrat
        for(Product vmItem: productList) {
            System.out.println(String.format("%s | %-18s | %-5s  %4d",
                    vmItem.getVendingIdentifier(),
                    vmItem.getName(),
                    USD_FORMATTER.format(vmItem.getPrice()),
                    vmItem.getQuantity()) );
        }
        printLine(43);
    }


    public void printLine(int n){

        for(int i=0; i<=n;i++)
            System.out.print("*");
        System.out.println();

    }

    // Shows current sales report after every completed transaction. Not the final sales report.
    public void viewTotalTransactions(){
        double totalSold = 0;
        printLine(34);
        System.out.println();

        for(Product product: productList){
            System.out.println(String.format("%s|%s", product.getName() , product.getAmountSold()));
            totalSold += product.getAmountSold() *  product.getPrice();
        }

        System.out.println("\n**TOTAL SALES** " + USD_FORMATTER.format(totalSold));
        printLine(34);
    }


    public void restockAllProducts(){

        for(Map.Entry<String, Product> vmItem: slotIdentifier.entrySet())
            vmItem.getValue().restock();

    }


    public void promptRestock(){

        System.out.print("Restock all items? [Y/N] >>> ");
        String choice = INPUT.next();

        if(choice.equals("y") || choice.equals("Y")) {

            System.out.print("Enter Admin password >>> ");
            choice = INPUT.next();

            if(choice.equals("vm800")){
                System.out.println("Restock successful");
                restockAllProducts();
            }
            else
                System.err.println("Restock failed");

        }
        printLine(34);
    }

    public void vm800Screen() {

        String[] vm800Lines = {
                "**   ***         ***  ****      ****        ********    *******    *******    **",
                "**    ***       ***   *****    *****       **      **  **     **  **     **   **",
                "**     ***     ***    *** **  ** ***  ***  **      **  **     **  **     **   **",
                "**      ***   ***     ***  ****  ***  ***  **********  **     **  **     **   **",
                "**       *** ***      ***   **   ***       **      **  **     **  **     **   **",
                "**        *****       ***        ***       **      **  **     **  **     **   **",
                "**         ***        ***        ***        ********    *******    *******    **"
        };

        System.out.println();
        printLine(79);
        try {
            for(String line:vm800Lines){
                System.out.println(line);
                TimeUnit.MILLISECONDS.sleep(100);
            }
            printLine(79);
        } catch (InterruptedException interruptedException) {
            System.err.println("Error occured diplaying screen");
        }
    }

    public boolean validCurrency(double value){

        int[] usDenominations = {1,5,10,20};

        for(int denomination:usDenominations) {
            if (value == denomination)
                return true;
        }

        return false;
    }

    public void shutDown(){

        try {
            SalesReport.generateSalesReport(productList);
            System.out.print("\nShutting down ");

            for(int i = 1; i<=34;i++){
                System.out.print("*");
                TimeUnit.MILLISECONDS.sleep(65);
            }
        } catch (InterruptedException interruptedException) {
            System.err.println("An error occured while shutting down.");
        }

    }

    public Map<String, Product> getInventory(){
        return this.slotIdentifier;
    }

}


